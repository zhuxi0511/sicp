(define (expmod base exp m)
  (define (check-square r)
    (define rs (remainder (square r) m))
    (if (and (= 1 rs)
             (not (= 1 r))
             (not (= (- m 1) r))
             )
      0
      rs))
  (cond ((= exp 0) 1)
        ((even? exp) 
         (check-square (expmod base (/ exp 2) m)))
        (else 
          (remainder (* base (expmod base (- exp 1) m)) m))
        ) 
  )
(define (fermat-test n)
  (define (try-it a)
    (= (expmod a (- n 1) n) 1))
  (try-it (+ 1 (random (- n 1))))
  )
(define (fast-prime? n times)
  (cond ((= 0 times) true)
        ((fermat-test n) (fast-prime? n (- times 1)))
        (else false)
        )
  )

(fast-prime? 561 10)
(fast-prime? 101 10)
