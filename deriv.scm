(define (variable? x) (symbol? x))
(define (same-variable? v1 v2) 
  (and (variable? v1)
       (variable? v2)
       (eq? v1 v2)
       )
  )

(define (=number? x v)
  (and (number? x) (eq? x v))
  )

(define (make-sum a1 a2)
  (cond ((=number? a1 0) a2)
        ((=number? a2 0) a1)
        ((and (number? a1) (number? a2)) (+ a1 a2))
        (else (list '+ a1 a2)))
  )
(define (make-product a1 a2)
  (cond ((or (=number? a1 0) (=number? a2 0)) 0)
        ((=number? a1 1) a2)
        ((=number? a2 1) a1)
        ((and (number? a1) (number? a2)) (* a1 a2))
        (else (list '* a1 a2)))
  )
(define (make-exponentiation a1 v)
  (cond ((=number? v 0) 1)
        ((=number? v 1) a1)
        (else (list '** a1 v))
        )
  )

(define (sum? e)
  (and (pair? e) (eq? '+ (car e)))
  )
(define (addend e)
  (car (cdr e))
  )
(define (augend e)
  (if (null? (cdddr e)) 
    (caddr e)
    (cons '+ (cdr (cdr e)))
    )
  )

(define (product? e)
  (and (pair? e) (eq? '* (car e)))
  )
(define (multiplier e)
  (car (cdr e))
  )
(define (multiplicand e)
  (if (null? (cdddr e)) 
    (caddr e)
    (cons '* (cdr (cdr e)))
    )
  )

(define (exponentiation? e)
  (and (pair? e) (pair? (cdr e)) (pair? (cddr e)) (eq? '** (car e)) (number? (caddr e)))
  )
(define (base e)
  (car (cdr e))
  )
(define (exponent e)
  (car (cdr (cdr e)))
  )

(define (deriv expression var)
  (cond ((number? expression) 0)
        ((variable? expression) 
         (if (same-variable? expression var) 1 0)
         )
        ((sum? expression) (make-sum (deriv (addend expression) var)
                            (deriv (augend expression) var)
                            ))
        ((product? expression) (make-sum 
                                 (make-product (multiplier expression)
                                               (deriv (multiplicand expression) var)
                                               )
                                 (make-product (deriv (multiplier expression) var)
                                               (multiplicand expression)
                                               )
                                 ))
        ((exponentiation? expression) (make-product 
                                        (exponent expression)
                                        (make-product 
                                          (make-exponentiation (base expression)
                                                               (- (exponent expression) 1)
                                                               )
                                          (deriv (base expression) var)           
                                        )))
        (else (error "unknown" expression))
  )
)

(deriv '(+ x 3) 'x)
(deriv '(* x y) 'x)
(deriv '(* (* x y) (+ x 3)) 'x)
(deriv '(** x 10) 'x)
(deriv '(** x 1) 'x)
